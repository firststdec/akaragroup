@import '_variables';

// Media Query
@mixin mq-min-pc {
  @media (min-width: #{$pcBreakpoint}) {
    @content;
  }
}

@mixin mq-min-tb {
  @media (min-width: #{$tbBreakpoint}) {
    @content;
  }
}

@mixin mq-max-tb {
  @media (max-width: #{$pcBreakpoint - 1px}) {
    @content;
  }
}

@mixin mq-min-max-tb {
  @media (min-width: #{$tbBreakpoint}) and (max-width: #{$pcBreakpoint - 1px}) {
    @content;
  }
}

@mixin mq-max-sp {
  @media (max-width: #{$tbBreakpoint - 1px}) {
    @content;
  }
}

// Media Query Custom
@mixin mq-custom-min($minWidth) {
  @media (min-width: #{$minWidth}) {
    @content;
  }
}

@mixin mq-custom--max($maxWidth) {
  @media (max-width: #{$maxWidth}) {
    @content;
  }
}

@mixin mq-custom--min-max($minWidth, $maxWidth) {
  @media screen and (min-width: #{$minWidth}) and (max-width: #{$maxWidth}) {
    @content;
  }
}

// Hover
@mixin hoverOpacity($opacity: 0.7) {
  transition: opacity 0.3s;
  // flex-shrink: 0;

  &:hover {
    opacity: $opacity;
    text-decoration: none;
  }
}

// hidden
@mixin hidden($speed:$transition) {
  max-height: 0;
  overflow: hidden;
  transition: max-height $speed;
}

/// Triangle helper mixin
/// @param {Length} $size [1px] - Triangle size

@mixin triangle($size1, $size2){
  width: 0;
  height: 0;
  border-style: solid;
  border-width: 0 0 $size1 $size2;
  border-color: transparent transparent #00ee9b transparent;
}

@mixin triangleWhite($size1, $size2){
  width: 0;
  height: 0;
  border-style: solid;
  border-width: 0 0 $size1 $size2;
  border-color: transparent transparent #ffffff transparent;
}
/// Triangle helper mixin
/// @param {Length} $size [1px] - Triangle size

@mixin triangleFlip($size1, $size2){
  width: 0;
  height: 0;
  border-style: solid;
  border-width: $size1 $size2 0 0;
  border-color: #00ee9b transparent transparent transparent;
}

@mixin textShadow() {
  text-shadow: 0px 2px 10px rgba(0,0,0,0.3);
}

// コンポーネントマージン
@mixin component() {
  margin-top: 30px;
  @include mq-min-tb {
    margin-top: 40px;
  }
}

// get-vw(40px)
@function get-vw($target) {
  $vw-context: (1440 * 0.01) * 1px;
  @return ($target / $vw-context) * 1vw;
}